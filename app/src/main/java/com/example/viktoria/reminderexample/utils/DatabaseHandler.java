package com.example.viktoria.reminderexample.utils;

import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteOpenHelper;

import java.util.ArrayList;
import java.util.List;

/**
 * The class that creates db and table to save list of reminders. Provide some methods for CRUD operations;
 */
public class DatabaseHandler extends SQLiteOpenHelper {
    private static DatabaseHandler databaseHandler;
    private static final int DATABASE_VERSION = 1;
    private static final String DATABASE_NAME = "remindersManager";
    private static final String TABLE_REMINDER = "reminder";
    //names of colums in table
    private static final String KEY_ID = "id"; //autogenerated
    private static final String KEY_TITLE = "title";
    private static final String KEY_DESCR = "description";
    private static final String KEY_EVENT_TIME = "eventTime";
    private static final String KEY_MINUTES_BET = "minutesBeforeEventTime";
    private static final String KEY_IS_CALENDAREVENT_ADDED = "isCalendarEventAdded";
    private static final String KEY_EVENT_ID = "eventId";
    private static final String KEY_REMINDER_ID = "reminderId";
    private static final String KEY_IS_BIRHDAY = "isBirthday";

    /**
     * Constructor should be private to prevent direct instantiation.
     * make call to static method "getInstance()" instead.
     */
    private DatabaseHandler(Context context) {
        super(context, DATABASE_NAME, null, DATABASE_VERSION);
    }

    //Singleton pattern
    public static DatabaseHandler getInstance(Context context) {
        // Use the application context, which will ensure that you
        // don't accidentally leak an Activity's context.
        if (databaseHandler == null) {
            databaseHandler = new DatabaseHandler(context.getApplicationContext());
        }
        return databaseHandler;
    }

    // create table
    @Override
    public void onCreate(SQLiteDatabase db) {
        String CREATE_REMINDER_TABLE = "CREATE TABLE " + TABLE_REMINDER + "("
                + KEY_ID + " INTEGER PRIMARY KEY," + KEY_TITLE + " TEXT,"
                + KEY_DESCR + " TEXT," + KEY_EVENT_TIME
                + " INTEGER," + KEY_MINUTES_BET + " INTEGER," + KEY_IS_CALENDAREVENT_ADDED +
                " INTEGER," + KEY_EVENT_ID + " INTEGER," + KEY_REMINDER_ID + " INTEGER," + KEY_IS_BIRHDAY + " INTEGER" + ")";
        db.execSQL(CREATE_REMINDER_TABLE);
    }

    // Upgrading database
    @Override
    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
        // Drop older table if existed
        db.execSQL("DROP TABLE IF EXISTS " + TABLE_REMINDER);

        // Create tables again
        onCreate(db);
    }

    /**
     * Add new reminder
     *
     * @param r - new item
     * @return - the same reminder as @param r, but with id setted to autogenerated value by SQLite
     */
    public Reminder addReminder(Reminder r) {
        SQLiteDatabase db = this.getWritableDatabase();
        ContentValues values = new ContentValues();
        values.put(KEY_TITLE, r.getTitle());
        values.put(KEY_DESCR, r.getDescription());
        values.put(KEY_EVENT_TIME, r.getEventTime());
        values.put(KEY_MINUTES_BET, r.getMinutesBeforeEventTime().getValue());
        int isCalendarEventAdded = r.isCalendarEventAdded() ? 1 : 0; //save boolean as int
        values.put(KEY_IS_CALENDAREVENT_ADDED, isCalendarEventAdded);
        values.put(KEY_EVENT_ID, r.getEventId());
        values.put(KEY_REMINDER_ID, r.getReminderId());
        int isBirthday = r.isBirthday() ? 1 : 0; //save boolean as int
        values.put(KEY_IS_BIRHDAY, isBirthday);
        // Inserting Row
        int id = (int) db.insert(TABLE_REMINDER, null, values);
        r.setId(id);
        db.close(); // Closing database connection
        return r;
    }

    public ArrayList<Reminder> addListOfReminders(ArrayList<Reminder> list) {
        SQLiteDatabase db = this.getWritableDatabase();
        Reminder r;
        try {
            db.beginTransaction();
            for (int i = 0; i < list.size(); i++) {
                r = list.get(i);
                ContentValues values = new ContentValues();
                values.put(KEY_TITLE, r.getTitle());
                values.put(KEY_DESCR, r.getDescription());
                values.put(KEY_EVENT_TIME, r.getEventTime());
                values.put(KEY_MINUTES_BET, r.getMinutesBeforeEventTime().getValue());
                int isCalendarEventAdded = r.isCalendarEventAdded() ? 1 : 0; //save boolean as int
                values.put(KEY_IS_CALENDAREVENT_ADDED, isCalendarEventAdded);
                values.put(KEY_EVENT_ID, r.getEventId());
                values.put(KEY_REMINDER_ID, r.getReminderId());
                int isBirthday = r.isBirthday() ? 1 : 0; //save boolean as int
                values.put(KEY_IS_BIRHDAY, isBirthday);
                // Inserting Row
                int id = (int) db.insert(TABLE_REMINDER, null, values);
                r.setId(id);
            }
            db.setTransactionSuccessful();

        } finally {
            db.endTransaction();
        }
        db.close(); // Closing database connection
        return list;
    }

    /**
     * Get list of all reminders
     *
     * @return list of all reminders
     */
    public List<Reminder> getAllReminders() {
        List<Reminder> reminderList = new ArrayList<Reminder>();
        // Select All Query
        String selectQuery = "SELECT  * FROM " + TABLE_REMINDER;
        SQLiteDatabase db = this.getReadableDatabase();
        Cursor cursor = db.rawQuery(selectQuery, null);
        // looping through all rows and adding to list
        if (cursor.moveToFirst()) {
            while (cursor.isAfterLast() == false) {
                Reminder r = new Reminder();
                r.setId(Integer.parseInt(cursor.getString(0)));
                r.setTitle(cursor.getString(1));
                r.setDescription(cursor.getString(2));
                r.setEventTime(Long.parseLong(cursor.getString(3)));
                r.setMinutesBeforeEventTime(MinutesBeforeEventTime.getTypeByValue(Integer.parseInt(cursor.getString(4))));
                r.setCalendarEventAdded(Integer.parseInt(cursor.getString(5)) != 0);
                r.setEventId(Integer.parseInt(cursor.getString(6)));
                r.setReminderId(Integer.parseInt(cursor.getString(7)));
                r.setBirthday(Integer.parseInt(cursor.getString(8)) != 0);
                // Adding reminder to list
                reminderList.add(r);
                cursor.moveToNext();
            }
        }

        return reminderList;
    }

    /**
     * Deletes given reminder by its id
     *
     * @param r reminder to delete
     */
    public void deleteReminder(Reminder r) {
        SQLiteDatabase db = this.getWritableDatabase();
        db.delete(TABLE_REMINDER, KEY_ID + " = ?",
                new String[]{String.valueOf(r.getId())});
        db.close();
    }

    /**
     * Update existing reminder by its id
     *
     * @param r reminder to update
     * @return amount of rows updated
     */
    public int updateReminder(Reminder r) {
        SQLiteDatabase db = this.getWritableDatabase();
        ContentValues values = new ContentValues();
        values.put(KEY_TITLE, r.getTitle());
        values.put(KEY_DESCR, r.getDescription());
        values.put(KEY_EVENT_TIME, r.getEventTime());
        values.put(KEY_MINUTES_BET, r.getMinutesBeforeEventTime().getValue());
        int isCalendarEventAdded = r.isCalendarEventAdded() ? 1 : 0;
        values.put(KEY_IS_CALENDAREVENT_ADDED, isCalendarEventAdded);
        values.put(KEY_EVENT_ID, r.getEventId());
        values.put(KEY_REMINDER_ID, r.getReminderId());
        int isBirthday = r.isBirthday() ? 1 : 0; //save boolean as int
        values.put(KEY_IS_BIRHDAY, isBirthday);
        // updating row
        return db.update(TABLE_REMINDER, values, KEY_ID + " = ?",
                new String[]{String.valueOf(r.getId())});
    }

    /**
     * Get amount of reminders, count lines in table
     *
     * @return amount of reminders
     */
    public int getRemindersCount() {
        String countQuery = "SELECT  * FROM " + TABLE_REMINDER;
        SQLiteDatabase db = this.getReadableDatabase();
        Cursor cursor = db.rawQuery(countQuery, null);
        int count = cursor.getCount();
        cursor.close();
        return count;
    }

    /**
     * Get amount of bday reminders, count lines in table
     *
     * @return amount of bday reminders
     */
    public int getBirthdayRemindersCount() {
        String countQuery = "SELECT  * FROM " + TABLE_REMINDER + " WHERE " + KEY_IS_BIRHDAY + "=1";
        SQLiteDatabase db = this.getReadableDatabase();
        Cursor cursor = db.rawQuery(countQuery, null);
        int count = cursor.getCount();
        cursor.close();
        return count;
    }

    /**
     * Deletes all birthday reminders
     */
    public void deleteBirthdayReminders() {
        SQLiteDatabase db = this.getWritableDatabase();
        db.delete(TABLE_REMINDER, KEY_IS_BIRHDAY + " = ?",
                new String[]{"1"});
        db.close();
    }
    /**
     * Get list of all birthday reminders
     *
     * @return list of all birthday reminders
     */
    public List<Reminder> getAllBirthdayReminders() {
        List<Reminder> reminderList = new ArrayList<Reminder>();
        // Select All Query
        String selectQuery = "SELECT  * FROM " + TABLE_REMINDER+" WHERE " + KEY_IS_BIRHDAY + "=1";
        SQLiteDatabase db = this.getReadableDatabase();
        Cursor cursor = db.rawQuery(selectQuery, null);
        // looping through all rows and adding to list
        if (cursor.moveToFirst()) {
            while (cursor.isAfterLast() == false) {
                Reminder r = new Reminder();
                r.setId(Integer.parseInt(cursor.getString(0)));
                r.setTitle(cursor.getString(1));
                r.setDescription(cursor.getString(2));
                r.setEventTime(Long.parseLong(cursor.getString(3)));
                r.setMinutesBeforeEventTime(MinutesBeforeEventTime.getTypeByValue(Integer.parseInt(cursor.getString(4))));
                r.setCalendarEventAdded(Integer.parseInt(cursor.getString(5)) != 0);
                r.setEventId(Integer.parseInt(cursor.getString(6)));
                r.setReminderId(Integer.parseInt(cursor.getString(7)));
                r.setBirthday(Integer.parseInt(cursor.getString(8)) != 0);
                // Adding reminder to list
                reminderList.add(r);
                cursor.moveToNext();
            }
        }

        return reminderList;
    }
}
